[tox]
envlist = py{36,37,38,39}-{linux,macos}

[gh-actions]
python =
    3.6: py36
    3.7: py37
    3.8: py38
    3.9: py39
    pypy3: pypy3

[testenv]
description = Run tests with coverage with pytest under current Python env
setenv = COVERAGE_FILE=.coverage.{envname}
passenv = CI
deps =
    -rtests/requirements.txt
    coverage
usedevelop = True
commands =
    coverage run --parallel-mode -m pytest -vv --timeout=180 {posargs}
    coverage combine
    coverage report -m
    coverage xml

[testenv:final-coverage]
description = Combine coverage data across environments (run after tests)
skip_install = True
setenv = COVERAGE_FILE=.coverage
passenv = {[testenv]passenv}
deps = coverage
commands =
    coverage erase
    coverage combine
    coverage report -m
    coverage xml

[testenv:codecov]
description = Upload coverage data to codecov (only run on CI)
setenv =
    {[testenv:final-coverage]setenv}
passenv = {[testenv]passenv}
deps = codecov
commands = codecov --required

## Configure linters

[testenv:lint]
description = Lint code and docs against some standard standards
basepython = python3
skip_install = false
deps =
    {[testenv:flake8]deps}
    {[testenv:pylint]deps}
    {[testenv:packaging]deps}
commands =
    {[testenv:flake8]commands}
    {[testenv:pylint]commands}
    {[testenv:packaging]commands}

[testenv:flake8] # Will use the configuration file `.flake8` automatically
description = Use flake8 linter to impose standards on the project
basepython = python3
skip_install = true
deps =
    flake8 == 3.8.*
    flake8-import-order == 0.18.*
    flake8-docstrings == 1.5.*
    flake8-bugbear == 20.1.*
commands =
    flake8 src/orion/ tests/ setup.py

[testenv:pylint] # Will use the configuration file `.pylintrc` automatically
description = Perform static analysis and output code metrics
basepython = python3
skip_install = false
deps =
    pylint == 2.5.*
commands =
    pylint src/orion/algo/skopt/bayes.py

[testenv:packaging]
description = Check whether README.rst is reST and missing from MANIFEST.in
basepython = python3.6
deps =
    check-manifest
    readme_renderer
commands =
    check-manifest
    python setup.py check -r -s

## Setup development process

[testenv:devel]
description = Incremental devel env command, defaults to running tests
deps =
    -rtests/requirements.txt
usedevelop = True
commands =
    python setup.py test --addopts '-vvv --exitfirst --looponfail {posargs}'

## Release tooling (to be removed in favor of CI with CD)

[testenv:build]
basepython = python3
skip_install = true
deps =
    wheel
    setuptools
commands =
    python setup.py -q sdist bdist_wheel

[testenv:release]
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine >= 1.5.0
commands =
    {[testenv:build]commands}
    twine upload --skip-existing dist/*

#########################################################
# Packages & Tools configuration
#########################################################

[pytest]
addopts = -ra -q --color=yes
norecursedirs = .* *.egg* config dist build
xfail_strict = True
rsyncdirs = src tests
looponfailroots = src tests

[coverage:run]
branch = True
source =
    src
    tests
omit = **/_[a-zA-Z0-9]*.py

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Don't complain if tests don't hit defensive assertion code:
    pass
    raise AssertionError
    raise NotImplementedError
